name: Build & Deploy Apps

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: ap-south-1
  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: 211125325699.dkr.ecr.ap-south-1.amazonaws.com  # Use actual value

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      EKS_CLUSTER_NAME: support-eks
      ALB_ROLE_ARN: ${{ vars.AWS_ALB_CONTROLLER_ROLE_ARN }}

    steps:
    - uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_GITHUB_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}  # Fixed region consistency

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build & push Flask (backend)
      run: |
        docker build -t flask-backend ./backend
        docker tag flask-backend:latest ${{ env.ECR_REGISTRY }}/support-portal-flask-backend:${{ env.IMAGE_TAG }}
        docker push ${{ env.ECR_REGISTRY }}/support-portal-flask-backend:${{ env.IMAGE_TAG }}

    - name: Build & push React (frontend)
      run: |
        docker build -t react-frontend ./frontend
        docker tag react-frontend:latest ${{ env.ECR_REGISTRY }}/support-portal-react-frontend:${{ env.IMAGE_TAG }}
        docker push ${{ env.ECR_REGISTRY }}/support-portal-react-frontend:${{ env.IMAGE_TAG }}
      
    - uses: azure/setup-kubectl@v3
      with:
        version: 'v1.32.0'
        
    - name: Verify EKS Cluster Access
      run: |
        aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Set up Helm
      uses: azure/setup-helm@v4

    - name: Helm repos
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

    - name: Apply AWS LB Controller
      run: |
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          --namespace kube-system \
          --set clusterName=${{ env.EKS_CLUSTER_NAME }} \
          --set region=${{ env.AWS_REGION }} \
          --set vpcId=$(aws eks describe-cluster \
                         --name ${{ env.EKS_CLUSTER_NAME }} \
                         --query 'cluster.resourcesVpcConfig.vpcId' \
                         --output text) \
          --set serviceAccount.create=true \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${{ env.ALB_ROLE_ARN }}"

    - name: Deploy manifests
      working-directory: ./k8s
      run: |
        # Inject the new image tag into the manifest
        sed -i "s|image:.*|image: ${{ env.ECR_REGISTRY }}/support-portal-flask-backend:${{ env.IMAGE_TAG }}|g" backend-deployment.yaml
        sed -i "s|image:.*|image: ${{ env.ECR_REGISTRY }}/support-portal-react-frontend:${{ env.IMAGE_TAG }}|g" frontend-deployment.yaml

        kubectl label node  ip-10-0-11-117.ap-south-1.compute.internal  nodegroup-type=backend        
        kubectl label node  ip-10-0-12-16.ap-south-1.compute.internal   nodegroup-type=backend  
            
        kubectl apply -f namespace.yaml
        kubectl apply -f serviceaccount.yaml
        
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f frontend-deployment.yaml
      
        kubectl apply -f frontend-ingress.yaml
        kubectl apply -f backend-ingress.yaml
